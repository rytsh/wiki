import{_ as a,o as n,c as o,ag as e}from"./chunks/framework.BcBuEkoe.js";const D=JSON.parse('{"title":"Mock Interfaces","description":"Mock interfaces in golang https://github.com/uber-go/mock","frontmatter":{"head":[["meta",{"name":"description","content":"Mock interfaces in golang https://github.com/uber-go/mock"}],["meta",{"name":"keywords","content":"mock interfaces go golang mocking"}]]},"headers":[],"relativePath":"development/go/mock.md","filePath":"development/go/mock.md","lastUpdated":1747736072000}'),l={name:"development/go/mock.md"};function t(p,s,c,r,F,i){return n(),o("div",null,s[0]||(s[0]=[e(`<h1 id="mock-interfaces" tabindex="-1">Mock Interfaces <a class="header-anchor" href="#mock-interfaces" aria-label="Permalink to &quot;Mock Interfaces&quot;">​</a></h1><blockquote><p>Mock package in golang <a href="https://github.com/uber-go/mock" target="_blank" rel="noreferrer">https://github.com/uber-go/mock</a></p></blockquote><p>Google mock repo maintaining by Uber, it is new version of golang/mock.</p><h2 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-label="Permalink to &quot;Install&quot;">​</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#C3E88D;"> get</span><span style="color:#C3E88D;"> -tool</span><span style="color:#C3E88D;"> go.uber.org/mock/mockgen</span></span></code></pre></div><details><summary>Old method</summary><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#C3E88D;"> install</span><span style="color:#C3E88D;"> go.uber.org/mock/mockgen@latest</span></span></code></pre></div></details><p>Check version for verify installation.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#C3E88D;"> tool</span><span style="color:#C3E88D;"> mockgen</span><span style="color:#C3E88D;"> -version</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;"># mockgen --version</span></span></code></pre></div><details><summary>Old method to add makefile</summary><p>Add this installation in the <code>Makefile</code> for easy access.</p><div class="language-makefile"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">.PHONY</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> tools</span></span>
<span class="line"><span style="color:#82AAFF;">tools</span><span style="color:#89DDFF;">:</span><span style="color:#546E7A;font-style:italic;"> ## Download tools (mockgen)</span></span>
<span class="line"><span style="color:#EEFFFF;">	go install go.uber.org/mock/mockgen@latest</span></span></code></pre></div><blockquote><p>If you editing the interface and creating new mock, please use always last version of mockgen.</p></blockquote></details><h2 id="generate-mock" tabindex="-1">Generate Mock <a class="header-anchor" href="#generate-mock" aria-label="Permalink to &quot;Generate Mock&quot;">​</a></h2><p>If you have interface like below or you could be have multiple interfaces in the same file.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#546E7A;font-style:italic;">//go:generate go tool mockgen -source=\${GOFILE} -destination=mock_test.go -package=\${GOPACKAGE} ConfigLoader</span></span></code></pre></div><p>End of mockgen command, you need to add which interfaces you want to generate mock. Proper example for generate mock in <code>interface.go</code> file:</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#FFCB6B;"> etl</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">	&quot;</span><span style="color:#FFCB6B;">context</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">	&quot;</span><span style="color:#FFCB6B;">xxx/models</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#546E7A;font-style:italic;">//go:generate mockgen -source=\${GOFILE} -destination=interface_test.go -package=\${GOPACKAGE} Loader</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#FFCB6B;"> Loader</span><span style="color:#89DDFF;"> interface</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">	GetConfig</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;font-style:italic;">ctx</span><span style="color:#FFCB6B;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Context</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;font-style:italic;"> id</span><span style="color:#C792EA;"> int</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> (*</span><span style="color:#FFCB6B;">models</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Data</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> error</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">	SetConfig</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;font-style:italic;">ctx</span><span style="color:#FFCB6B;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Context</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;font-style:italic;"> data</span><span style="color:#89DDFF;"> []</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> (</span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Just click generate command in the IDE to run it. It will generate <code>interface_test.go</code> file in the same directory.</p><blockquote><p>Don&#39;t generate mock in the common mock folder, every component should be isolated in the same directory!</p></blockquote><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>First create mock of the sturct, code generated by mockgen and just reach <code>NewMockXXX</code> function.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#EEFFFF;">ctrl </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> gomock</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewController</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">t</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">defer</span><span style="color:#EEFFFF;"> ctrl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Finish</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EEFFFF;">clMock </span><span style="color:#89DDFF;">:=</span><span style="color:#82AAFF;"> NewMockConfigLoader</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">ctrl</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>After that use that clMock to add EXPECT and returns, for example:</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#EEFFFF;">cl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">EXPECT</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">GetFileType</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">gomock</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Any</span><span style="color:#89DDFF;">(),</span><span style="color:#EEFFFF;"> gomock</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Any</span><span style="color:#89DDFF;">()).</span><span style="color:#82AAFF;">Return</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#FFCB6B;">models</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Data</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#EEFFFF;">    Test</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#89DDFF;"> nil).</span><span style="color:#82AAFF;">Times</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EEFFFF;">cl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">EXPECT</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">GetPluginType</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">gomock</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Any</span><span style="color:#89DDFF;">(),</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">Return</span><span style="color:#89DDFF;">(nil,</span><span style="color:#EEFFFF;"> errors</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">meaningless error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)).</span><span style="color:#82AAFF;">Times</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span></code></pre></div>`,21)]))}const d=a(l,[["render",t]]);export{D as __pageData,d as default};
