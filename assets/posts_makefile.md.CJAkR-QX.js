import{_ as n,c as a,a2 as l,o as p}from"./chunks/framework.BQmytedh.js";const D=JSON.parse('{"title":"Makefile","description":"Makefile example for golang projects.","frontmatter":{"head":[["meta",{"name":"description","content":"Makefile example for golang projects."}],["meta",{"name":"keywords","content":"makefile golang go"}]]},"headers":[],"relativePath":"posts/makefile.md","filePath":"posts/makefile.md","lastUpdated":1730909714000}'),o={name:"posts/makefile.md"};function e(F,s,t,c,r,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="makefile" tabindex="-1">Makefile <a class="header-anchor" href="#makefile" aria-label="Permalink to &quot;Makefile&quot;">â€‹</a></h1><p>Example of a good makefile for go codebase.</p><ul><li>Always <code>.PHONY</code> targets add above the target so we can add new without change the PHONY list.</li><li>Default goal should be <code>help</code> and don&#39;t run anything if user not specify a target.</li><li>Use <code>go list -m</code> to get the package name.</li><li><code>/bin</code> directory should be added in the <code>.gitignore</code> file.</li></ul><div class="language-makefile"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#EEFFFF;">BINARY    </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> awesome</span></span>
<span class="line"><span style="color:#EEFFFF;">MAIN_FILE </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> cmd/</span><span style="color:#89DDFF;">$(</span><span style="color:#EEFFFF;">BINARY</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;">/main.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EEFFFF;">PKG       </span><span style="color:#89DDFF;">:=</span><span style="color:#89DDFF;"> $(</span><span style="color:#82AAFF;">shell</span><span style="color:#C3E88D;"> go list -m</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#EEFFFF;">VERSION   </span><span style="color:#89DDFF;">:=</span><span style="color:#89DDFF;"> $(</span><span style="color:#82AAFF;">or</span><span style="color:#89DDFF;"> $(</span><span style="color:#EEFFFF;">IMAGE_TAG</span><span style="color:#89DDFF;">),$(</span><span style="color:#82AAFF;">shell</span><span style="color:#C3E88D;"> git describe --tags --first-parent --match &quot;v</span><span style="color:#F07178;">*</span><span style="color:#C3E88D;">&quot; 2&gt; /dev/null || echo v0.0.0</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EEFFFF;">LOCAL_BIN_DIR </span><span style="color:#89DDFF;">:=</span><span style="color:#89DDFF;"> $(</span><span style="color:#EEFFFF;">PWD</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;">/bin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EEFFFF;">.DEFAULT_GOAL </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> help</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">.PHONY</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> run</span></span>
<span class="line"><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">:</span><span style="color:#546E7A;font-style:italic;"> ## Run the application</span></span>
<span class="line"><span style="color:#EEFFFF;">	go run </span><span style="color:#89DDFF;">$(</span><span style="color:#EEFFFF;">MAIN_FILE</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">.PHONY</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> build</span></span>
<span class="line"><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> CGO_ENABLED ?= 0</span></span>
<span class="line"><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> GOOS ?= linux</span></span>
<span class="line"><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> GOARCH ?= amd64</span></span>
<span class="line"><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> docs </span><span style="color:#546E7A;font-style:italic;">## Build the binary file</span></span>
<span class="line"><span style="color:#EEFFFF;">	go build -trimpath -ldflags=&quot;-s -w -X </span><span style="color:#89DDFF;">$(</span><span style="color:#EEFFFF;">PKG</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;">/config.ServiceVersion=</span><span style="color:#89DDFF;">$(</span><span style="color:#EEFFFF;">VERSION</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;">&quot; -o </span><span style="color:#89DDFF;">$(</span><span style="color:#EEFFFF;">LOCAL_BIN_DIR</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;">/</span><span style="color:#89DDFF;">$(</span><span style="color:#EEFFFF;">BINARY</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> $(</span><span style="color:#EEFFFF;">MAIN_FILE</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">.PHONY</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> docs</span></span>
<span class="line"><span style="color:#82AAFF;">docs</span><span style="color:#89DDFF;">:</span><span style="color:#546E7A;font-style:italic;"> ## Generate Swagger documentation</span></span>
<span class="line"><span style="color:#EEFFFF;">	go mod download -x</span></span>
<span class="line"><span style="color:#EEFFFF;">	swag init -pd -g cmd/</span><span style="color:#89DDFF;">$(</span><span style="color:#EEFFFF;">BINARY</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;">/main.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">.PHONY</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> lint</span></span>
<span class="line"><span style="color:#82AAFF;">lint</span><span style="color:#89DDFF;">:</span><span style="color:#546E7A;font-style:italic;"> ## Lint Go files</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	@</span><span style="color:#EEFFFF;">GOPATH=&quot;</span><span style="color:#89DDFF;">$(</span><span style="color:#82AAFF;">shell</span><span style="color:#C3E88D;"> dirname </span><span style="color:#89DDFF;">$(</span><span style="color:#EEFFFF;">PWD</span><span style="color:#89DDFF;">))</span><span style="color:#EEFFFF;">&quot; golangci-lint run ./...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">.PHONY</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> test</span></span>
<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">:</span><span style="color:#546E7A;font-style:italic;"> ## Run unit tests</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	@</span><span style="color:#EEFFFF;">go test -v -race ./...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">.PHONY</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> coverage</span></span>
<span class="line"><span style="color:#82AAFF;">coverage</span><span style="color:#89DDFF;">:</span><span style="color:#546E7A;font-style:italic;"> ## Run unit tests with coverage</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	@</span><span style="color:#EEFFFF;">go test -v -race -cover -coverpkg=./... -coverprofile=coverage.out -covermode=atomic ./...</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	@</span><span style="color:#EEFFFF;">go tool cover -func=coverage.out</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">.PHONY</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> help</span></span>
<span class="line"><span style="color:#82AAFF;">help</span><span style="color:#89DDFF;">:</span><span style="color:#546E7A;font-style:italic;"> ## Display this help screen</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	@</span><span style="color:#EEFFFF;">grep -h -E &#39;^[a-zA-Z_-]+:.*?## .*$$&#39; </span><span style="color:#89DDFF;">$(</span><span style="color:#EEFFFF;">MAKEFILE_LIST</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;"> | awk &#39;BEGIN {FS = &quot;:.*?## &quot;}; {printf &quot;\\033[36m%-30s\\033[0m %s\\n&quot;, $$1, $$2}&#39;</span></span></code></pre></div><p>Other type of information given are with using main package. So we don&#39;t need to any pkg name knowledge.</p><p>I prefer this one much more for making open source projects.</p><div class="language-makefile"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#EEFFFF;">BUILD_DATE </span><span style="color:#89DDFF;">:=</span><span style="color:#89DDFF;"> $(</span><span style="color:#82AAFF;">shell</span><span style="color:#C3E88D;"> date -u &#39;+</span><span style="color:#F07178;">%</span><span style="color:#C3E88D;">Y-</span><span style="color:#F07178;">%</span><span style="color:#C3E88D;">m-</span><span style="color:#F07178;">%</span><span style="color:#C3E88D;">d_</span><span style="color:#F07178;">%</span><span style="color:#C3E88D;">H:</span><span style="color:#F07178;">%</span><span style="color:#C3E88D;">M:</span><span style="color:#F07178;">%</span><span style="color:#C3E88D;">S&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#EEFFFF;">BUILD_COMMIT </span><span style="color:#89DDFF;">:=</span><span style="color:#89DDFF;"> $(</span><span style="color:#82AAFF;">shell</span><span style="color:#C3E88D;"> git rev-parse --short HEAD</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#EEFFFF;">VERSION </span><span style="color:#89DDFF;">:=</span><span style="color:#89DDFF;"> $(</span><span style="color:#82AAFF;">or</span><span style="color:#89DDFF;"> $(</span><span style="color:#EEFFFF;">IMAGE_TAG</span><span style="color:#89DDFF;">),$(</span><span style="color:#82AAFF;">shell</span><span style="color:#C3E88D;"> git describe --tags --first-parent --match &quot;v</span><span style="color:#F07178;">*</span><span style="color:#C3E88D;">&quot; 2&gt; /dev/null || echo v0.0.0</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">.PHONY</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> build</span></span>
<span class="line"><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> CGO_ENABLED ?= 0</span></span>
<span class="line"><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> GOOS ?= linux</span></span>
<span class="line"><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> GOARCH ?= amd64</span></span>
<span class="line"><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">:</span><span style="color:#546E7A;font-style:italic;"> ## Build the binary</span></span>
<span class="line"><span style="color:#EEFFFF;">	go build -trimpath -ldflags=&quot;-s -w -X main.version=</span><span style="color:#89DDFF;">$(</span><span style="color:#EEFFFF;">VERSION</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;"> -X main.commit=</span><span style="color:#89DDFF;">$(</span><span style="color:#EEFFFF;">BUILD_COMMIT</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;"> -X main.date=</span><span style="color:#89DDFF;">$(</span><span style="color:#EEFFFF;">BUILD_DATE</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;">&quot; -o bin/</span><span style="color:#89DDFF;">$(</span><span style="color:#EEFFFF;">BINARY_NAME</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> $(</span><span style="color:#EEFFFF;">BINARY_PATH</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>For library projects, we can use this one.</p><div class="language-makefile"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#EEFFFF;">.DEFAULT_GOAL </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> help</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">.PHONY</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> lint</span></span>
<span class="line"><span style="color:#82AAFF;">lint</span><span style="color:#89DDFF;">:</span><span style="color:#546E7A;font-style:italic;"> ## Lint Go files</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	@</span><span style="color:#EEFFFF;">GOPATH=&quot;</span><span style="color:#89DDFF;">$(</span><span style="color:#82AAFF;">shell</span><span style="color:#C3E88D;"> dirname </span><span style="color:#89DDFF;">$(</span><span style="color:#EEFFFF;">PWD</span><span style="color:#89DDFF;">))</span><span style="color:#EEFFFF;">&quot; golangci-lint run ./...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">.PHONY</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> test</span></span>
<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">:</span><span style="color:#546E7A;font-style:italic;"> ## Run unit tests</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	@</span><span style="color:#EEFFFF;">go test -v -race ./...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">.PHONY</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> coverage</span></span>
<span class="line"><span style="color:#82AAFF;">coverage</span><span style="color:#89DDFF;">:</span><span style="color:#546E7A;font-style:italic;"> ## Run unit tests with coverage</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	@</span><span style="color:#EEFFFF;">go test -v -race -cover -coverpkg=./... -coverprofile=coverage.out -covermode=atomic ./...</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	@</span><span style="color:#EEFFFF;">go tool cover -func=coverage.out</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">.PHONY</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> help</span></span>
<span class="line"><span style="color:#82AAFF;">help</span><span style="color:#89DDFF;">:</span><span style="color:#546E7A;font-style:italic;"> ## Display this help screen</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	@</span><span style="color:#EEFFFF;">grep -h -E &#39;^[a-zA-Z_-]+:.*?## .*$$&#39; </span><span style="color:#89DDFF;">$(</span><span style="color:#EEFFFF;">MAKEFILE_LIST</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;"> | awk &#39;BEGIN {FS = &quot;:.*?## &quot;}; {printf &quot;\\033[36m%-30s\\033[0m %s\\n&quot;, $$1, $$2}&#39;</span></span></code></pre></div>`,9)]))}const E=n(o,[["render",e]]);export{D as __pageData,E as default};
