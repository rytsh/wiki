import{_ as n,o as a,c as o,ag as l}from"./chunks/framework.BcBuEkoe.js";const D=JSON.parse('{"title":"Registry","description":"rpardini/docker-registry-proxy is very good project to hold images and not to download them every time.","frontmatter":{"head":[["meta",{"name":"description","content":"rpardini/docker-registry-proxy is very good project to hold images and not to download them every time."}],["meta",{"name":"keywords","content":"registry"}]]},"headers":[],"relativePath":"development/kubernetes/cluster/registry.md","filePath":"development/kubernetes/cluster/registry.md","lastUpdated":1743799263000}'),e={name:"development/kubernetes/cluster/registry.md"};function p(t,s,r,c,F,y){return a(),o("div",null,s[0]||(s[0]=[l(`<h1 id="registry" tabindex="-1">Registry <a class="header-anchor" href="#registry" aria-label="Permalink to &quot;Registry&quot;">â€‹</a></h1><p><a href="https://github.com/rpardini/docker-registry-proxy" target="_blank" rel="noreferrer">rpardini/docker-registry-proxy</a> is very good project to hold images and not to download them every time. Especially good for <code>kind</code> clusters.</p><p>Before to start container if any authentication needed pass it with <code>AUTH_REGISTRIES</code> environment variable.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">-e</span><span style="color:#C3E88D;"> AUTH_REGISTRIES=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">auth.docker.io:dockerhub_username:dockerhub_password your.own.registry:username:password</span><span style="color:#89DDFF;">&quot;</span><span style="color:#EEFFFF;"> \\</span></span></code></pre></div><p>Always set <code>REGISTRIES</code> environment variable and add what need, if not it gets error when download images.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#EEFFFF;"> KIND_EXPERIMENTAL_PROVIDER</span><span style="color:#89DDFF;">=\${</span><span style="color:#EEFFFF;">KIND_EXPERIMENTAL_PROVIDER</span><span style="color:#89DDFF;">:-</span><span style="color:#EEFFFF;">docker</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#546E7A;font-style:italic;"># check registry container if not exists</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;"> \${</span><span style="color:#EEFFFF;">KIND_EXPERIMENTAL_PROVIDER</span><span style="color:#89DDFF;">}</span><span style="color:#EEFFFF;"> ps -a --format </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{{.Names}}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> grep</span><span style="color:#C3E88D;"> -q</span><span style="color:#C3E88D;"> docker_registry_proxy</span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;font-style:italic;"> then</span></span>
<span class="line"><span style="color:#82AAFF;">  echo</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">&gt; Registry container already exists</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#82AAFF;">  echo</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">&gt; Creating registry container</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">  sudo</span><span style="color:#C3E88D;"> install</span><span style="color:#C3E88D;"> -d</span><span style="color:#C3E88D;"> -m</span><span style="color:#F78C6C;"> 0777</span><span style="color:#C3E88D;"> /opt/registry</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  \${</span><span style="color:#EEFFFF;">KIND_EXPERIMENTAL_PROVIDER</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> run</span><span style="color:#C3E88D;"> -d</span><span style="color:#C3E88D;"> --restart=always</span><span style="color:#C3E88D;"> --name</span><span style="color:#C3E88D;"> docker_registry_proxy</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#C3E88D;">    --hostname</span><span style="color:#C3E88D;"> docker-registry-proxy</span><span style="color:#C3E88D;"> --network</span><span style="color:#C3E88D;"> kind</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#C3E88D;">    -p</span><span style="color:#C3E88D;"> 0.0.0.0:3128:3128</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#C3E88D;">    -v</span><span style="color:#C3E88D;"> /opt/registry/docker_mirror_cache:/docker_mirror_cache</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#C3E88D;">    -v</span><span style="color:#C3E88D;"> /opt/registry/docker_mirror_certs:/ca</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#C3E88D;">    -e</span><span style="color:#C3E88D;"> REGISTRIES=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">registry.k8s.io k8s.gcr.io gcr.io ghcr.io quay.io docker.io</span><span style="color:#89DDFF;">&quot;</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#C3E88D;">    -e</span><span style="color:#C3E88D;"> AUTH_REGISTRIES=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">registry.k8s.io:</span><span style="color:#89DDFF;">\${</span><span style="color:#EEFFFF;">TOKEN</span><span style="color:#89DDFF;">}&quot;</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#C3E88D;">    rpardini/docker-registry-proxy:0.6.4</span></span>
<span class="line"><span style="color:#82AAFF;">  echo</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">&gt; Waiting for registry container to start 10s</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">  sleep</span><span style="color:#F78C6C;"> 10</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">&gt; Setting up container proxy</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#EEFFFF;">KIND_NAME</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">kind</span></span>
<span class="line"><span style="color:#EEFFFF;">SETUP_URL</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">http://docker-registry-proxy:3128/setup/systemd</span></span>
<span class="line"><span style="color:#EEFFFF;">pids</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#EEFFFF;"> NODE </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#89DDFF;"> $(</span><span style="color:#FFCB6B;">kind</span><span style="color:#C3E88D;"> get</span><span style="color:#C3E88D;"> nodes</span><span style="color:#C3E88D;"> --name</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#EEFFFF;">$KIND_NAME</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#89DDFF;font-style:italic;"> do</span></span>
<span class="line"><span style="color:#89DDFF;">  \${</span><span style="color:#EEFFFF;">KIND_EXPERIMENTAL_PROVIDER</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> exec</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#EEFFFF;">$NODE</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> sh</span><span style="color:#C3E88D;"> -c</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#EEFFFF;">\\</span></span>
<span class="line"><span style="color:#C3E88D;">      curl </span><span style="color:#EEFFFF;">$SETUP_URL</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#C3E88D;">      | sed s/docker\\.service/containerd\\.service/g </span><span style="color:#EEFFFF;">\\</span></span>
<span class="line"><span style="color:#C3E88D;">      | sed &#39;/Environment/ s/$/ </span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;">NO_PROXY=127.0.0.0\\/8,10.0.0.0\\/8,172.16.0.0\\/12,192.168.0.0\\/16</span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;">/&#39; </span><span style="color:#EEFFFF;">\\</span></span>
<span class="line"><span style="color:#C3E88D;">      | bash</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#EEFFFF;"> pids</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#EEFFFF;">$pids</span><span style="color:#EEFFFF;"> $!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#546E7A;font-style:italic;"> # Configure every node in background</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">done</span></span>
<span class="line"><span style="color:#82AAFF;">wait</span><span style="color:#EEFFFF;"> $pids </span><span style="color:#546E7A;font-style:italic;"># Wait for all configurations to end</span></span></code></pre></div>`,6)]))}const E=n(e,[["render",p]]);export{D as __pageData,E as default};
