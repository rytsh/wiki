import{_ as s,o as a,c as n,R as e}from"./chunks/framework.07BXFssY.js";const u=JSON.parse('{"title":"Management Machine","description":"","frontmatter":{},"headers":[],"relativePath":"kubernetes/management.md","filePath":"kubernetes/management.md","lastUpdated":1701909486000}'),o={name:"kubernetes/management.md"},l=e(`<h1 id="management-machine" tabindex="-1">Management Machine <a class="header-anchor" href="#management-machine" aria-label="Permalink to &quot;Management Machine&quot;">​</a></h1><p>For creating a cluster, first we need a management machine to setup dhcp, pxe, dns, etc.<br> I use <code>alpine linux</code> for this. It is a very small linux distro and perfect for this job.</p><p>First give the iso URL to the proxmox and it will download it.</p><p>When creating the virtual machine, give it 2 cores and 1GB of ram.<br> Also give it a 32GB disk, (based on kernel setting sata can view it).</p><p>For network, give it 2 network cards. One for the internet and one for the internal network.<br> Use Intel E1000 for both of them.</p><p>And our cluster machines just will be in the internal network.</p><p>For creating internal network just create a new bridge and give it a name and leave the gateway empty.</p><p>I use to go to internet with the management machine.</p><h4 id="network-config" tabindex="-1">Network Config <a class="header-anchor" href="#network-config" aria-label="Permalink to &quot;Network Config&quot;">​</a></h4><p>Setting manual IP address for the management machine.</p><p>In my case eth0 is the internet and eth1 is the internal network.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">cat</span><span style="color:#E6DB74;"> /etc/network/interfaces</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#A6E22E;">auto</span><span style="color:#E6DB74;"> lo</span></span>
<span class="line"><span style="color:#A6E22E;">iface</span><span style="color:#E6DB74;"> lo</span><span style="color:#E6DB74;"> inet</span><span style="color:#E6DB74;"> loopback</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">auto</span><span style="color:#E6DB74;"> eth0</span></span>
<span class="line"><span style="color:#A6E22E;">iface</span><span style="color:#E6DB74;"> eth0</span><span style="color:#E6DB74;"> inet</span><span style="color:#E6DB74;"> static</span></span>
<span class="line"><span style="color:#A6E22E;">        address</span><span style="color:#AE81FF;"> 192.168</span><span style="color:#E6DB74;">.68.220/24</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">auto</span><span style="color:#E6DB74;"> eth1</span></span>
<span class="line"><span style="color:#A6E22E;">iface</span><span style="color:#E6DB74;"> eth1</span><span style="color:#E6DB74;"> inet</span><span style="color:#E6DB74;"> static</span></span>
<span class="line"><span style="color:#A6E22E;">        address</span><span style="color:#AE81FF;"> 10.10</span><span style="color:#E6DB74;">.10.1/24</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">up</span><span style="color:#E6DB74;"> ip</span><span style="color:#E6DB74;"> route</span><span style="color:#E6DB74;"> add</span><span style="color:#E6DB74;"> default</span><span style="color:#E6DB74;"> via</span><span style="color:#AE81FF;"> 192.168</span><span style="color:#E6DB74;">.68.1</span></span></code></pre></div><p>And need to restart the network service.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">rc-service</span><span style="color:#E6DB74;"> networking</span><span style="color:#E6DB74;"> restart</span></span></code></pre></div><p>Inside of the <code>/etc/resolv.conf</code> file, we set search name.<br> To set directly with command line use this command:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">setup-dns</span><span style="color:#AE81FF;"> -s</span><span style="color:#E6DB74;"> kube-cluster</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">cat</span><span style="color:#E6DB74;"> /etc/resolv.conf</span></span>
<span class="line"><span style="color:#A6E22E;">search</span><span style="color:#E6DB74;"> cluster.kube-cluster</span><span style="color:#E6DB74;"> kube-cluster</span></span>
<span class="line"><span style="color:#A6E22E;">nameserver</span><span style="color:#AE81FF;"> 192.168</span><span style="color:#E6DB74;">.68.1</span></span></code></pre></div><p>Also need to set route for connecting to internet, if you didn&#39;t set in network config.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">ip</span><span style="color:#E6DB74;"> route</span><span style="color:#E6DB74;"> add</span><span style="color:#E6DB74;"> default</span><span style="color:#E6DB74;"> via</span><span style="color:#AE81FF;"> 192.168</span><span style="color:#E6DB74;">.68.1</span></span></code></pre></div><p>We will change nameserver later and use our own dns server.</p><p>I used in dhcpd server <code>kube-cluster</code> as domain name so <code>management.kube-cluster</code> will be the management machine&#39;s hostname.</p><h3 id="ssh" tabindex="-1">SSH <a class="header-anchor" href="#ssh" aria-label="Permalink to &quot;SSH&quot;">​</a></h3><p>Inside of the /etc/ssh/sshd_config file, we need to change the <code>PermitRootLogin</code> to <code>yes</code> and restart the service.<br> After pushing the ssh key to the management machine, we can connect to it with ssh and close the root login.</p><blockquote><p>If you can directly to push public-key to the management machine, that would be better!</p></blockquote><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># push the ssh public key to the management machine</span></span>
<span class="line"><span style="color:#A6E22E;">ssh-copy-id</span><span style="color:#E6DB74;"> root@192.168.68.220</span></span></code></pre></div><p>Now we can connect to the management machine with ssh.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">ssh</span><span style="color:#E6DB74;"> root@192.168.68.220</span></span></code></pre></div><p>And switch <code>PermitRootLogin</code> to <code>prohibit-password</code> and restart the service.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">rc-service</span><span style="color:#E6DB74;"> sshd</span><span style="color:#E6DB74;"> restart</span></span></code></pre></div><p>Change the motd message.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">vim</span><span style="color:#E6DB74;"> /etc/motd</span></span></code></pre></div><p>Connect always with SSH after this step.</p><h3 id="ssh-key" tabindex="-1">SSH Key <a class="header-anchor" href="#ssh-key" aria-label="Permalink to &quot;SSH Key&quot;">​</a></h3><p>Generate ssh key for the management machine.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">ssh-keygen</span></span></code></pre></div><blockquote><p>Copy the public key in the <code>/var/boot</code> directory we will use it while creating the machines.</p></blockquote><h3 id="ip-forward" tabindex="-1">IP Forward <a class="header-anchor" href="#ip-forward" aria-label="Permalink to &quot;IP Forward&quot;">​</a></h3><p>Enable ip forwarding so we can connect to the internet with using this machine from the internal network.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;">echo</span><span style="color:#E6DB74;">  net.ipv4.ip_forward</span><span style="color:#E6DB74;"> =</span><span style="color:#AE81FF;"> 1</span><span style="color:#F92672;"> &gt;&gt;</span><span style="color:#E6DB74;"> /etc/sysctl.conf</span></span>
<span class="line"><span style="color:#A6E22E;">sysctl</span><span style="color:#AE81FF;"> -p</span></span>
<span class="line"><span style="color:#A6E22E;">sysctl</span><span style="color:#AE81FF;"> -a</span><span style="color:#F92672;"> |</span><span style="color:#A6E22E;"> grep</span><span style="color:#E6DB74;"> net.ipv4.ip_forward</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">## enable NAT</span></span>
<span class="line"><span style="color:#A6E22E;">apk</span><span style="color:#E6DB74;"> add</span><span style="color:#E6DB74;"> iptables</span></span>
<span class="line"><span style="color:#A6E22E;">rc-update</span><span style="color:#E6DB74;"> add</span><span style="color:#E6DB74;"> iptables</span><span style="color:#E6DB74;"> default</span></span>
<span class="line"><span style="color:#88846F;"># eth1 is the internal interface</span></span>
<span class="line"><span style="color:#A6E22E;">iptables</span><span style="color:#AE81FF;"> -A</span><span style="color:#E6DB74;"> FORWARD</span><span style="color:#AE81FF;"> -i</span><span style="color:#E6DB74;"> eth1</span><span style="color:#AE81FF;"> -j</span><span style="color:#E6DB74;"> ACCEPT</span></span>
<span class="line"><span style="color:#88846F;"># eth0 is the external interface (connected to the internet)</span></span>
<span class="line"><span style="color:#A6E22E;">iptables</span><span style="color:#AE81FF;"> -t</span><span style="color:#E6DB74;"> nat</span><span style="color:#AE81FF;"> -A</span><span style="color:#E6DB74;"> POSTROUTING</span><span style="color:#AE81FF;"> -o</span><span style="color:#E6DB74;"> eth0</span><span style="color:#AE81FF;"> -j</span><span style="color:#E6DB74;"> MASQUERADE</span></span>
<span class="line"><span style="color:#A6E22E;">/etc/init.d/iptables</span><span style="color:#E6DB74;"> save</span></span></code></pre></div><h3 id="dns" tabindex="-1">DNS <a class="header-anchor" href="#dns" aria-label="Permalink to &quot;DNS&quot;">​</a></h3><p>Go and install <a href="./../tools/server/dns.html">coredns</a>.</p><h3 id="tftp" tabindex="-1">TFTP <a class="header-anchor" href="#tftp" aria-label="Permalink to &quot;TFTP&quot;">​</a></h3><p>Go and install <a href="./../tools/server/tftp.html">tftp</a>.</p><p><a href="https://wiki.alpinelinux.org/wiki/Netboot_Alpine_Linux_using_iPXE" target="_blank" rel="noreferrer">https://wiki.alpinelinux.org/wiki/Netboot_Alpine_Linux_using_iPXE</a></p><p>For setup ipxe, we need to add <code>boot.ipxe</code> file to the <code>/var/tftpboot/</code> directory.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai vp-code"><code><span class="line"><span>#!ipxe</span></span>
<span class="line"><span></span></span>
<span class="line"><span>set base-url http://10.10.10.1:7080</span></span>
<span class="line"><span></span></span>
<span class="line"><span>kernel \${base-url}/boot/vmlinuz-virt console=tty0 modules=loop,squashfs quiet nomodeset alpine_repo=https://dl-cdn.alpinelinux.org/alpine/v3.18/main modloop=http://10.10.10.1:7080/boot/modloop-virt</span></span>
<span class="line"><span>initrd \${base-url}/boot/initramfs-virt</span></span>
<span class="line"><span>boot</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">mkdir</span><span style="color:#AE81FF;"> -p</span><span style="color:#E6DB74;"> /var/boot</span></span>
<span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#E6DB74;"> /var/boot</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">curl</span><span style="color:#AE81FF;"> -fSL</span><span style="color:#E6DB74;"> https://dl-cdn.alpinelinux.org/alpine/v3.18/releases/x86_64/alpine-netboot-3.18.5-x86_64.tar.gz</span><span style="color:#F92672;"> |</span><span style="color:#A6E22E;"> tar</span><span style="color:#AE81FF;"> -xz</span><span style="color:#AE81FF;"> --overwrite</span></span></code></pre></div><p>Now we need to serve this directory to <code>0.0.0.0:7080</code></p><p>With <a href="https://worldline-go.github.io/turna/introduction/getting-started.html#linux" target="_blank" rel="noreferrer">turna</a>, we can do this.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># install it to /bin/ directory</span></span>
<span class="line"><span style="color:#A6E22E;">curl</span><span style="color:#AE81FF;"> -fSL</span><span style="color:#E6DB74;"> https://github.com/worldline-go/turna/releases/latest/download/turna_Linux_x86_64.tar.gz</span><span style="color:#F92672;"> |</span><span style="color:#A6E22E;"> tar</span><span style="color:#AE81FF;"> -xz</span><span style="color:#AE81FF;"> --overwrite</span><span style="color:#AE81FF;"> -C</span><span style="color:#E6DB74;"> /bin/</span><span style="color:#E6DB74;"> turna</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># add config to /var/boot/turna.yaml</span></span>
<span class="line"><span style="color:#A6E22E;">cat</span><span style="color:#F92672;"> &lt;&lt;</span><span style="color:#F8F8F2;">EOF</span><span style="color:#F92672;"> &gt;</span><span style="color:#F8F8F2;"> /var/boot/turna.yaml</span></span>
<span class="line"><span style="color:#E6DB74;">server:</span></span>
<span class="line"><span style="color:#E6DB74;">  entrypoints:</span></span>
<span class="line"><span style="color:#E6DB74;">    web:</span></span>
<span class="line"><span style="color:#E6DB74;">      address: &quot;:7080&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">  http:</span></span>
<span class="line"><span style="color:#E6DB74;">    middlewares:</span></span>
<span class="line"><span style="color:#E6DB74;">      folder:</span></span>
<span class="line"><span style="color:#E6DB74;">        folder:</span></span>
<span class="line"><span style="color:#E6DB74;">          path: /var/boot</span></span>
<span class="line"><span style="color:#E6DB74;">          browse: true</span></span>
<span class="line"><span style="color:#E6DB74;">    routers:</span></span>
<span class="line"><span style="color:#E6DB74;">      boot:</span></span>
<span class="line"><span style="color:#E6DB74;">        path: /*</span></span>
<span class="line"><span style="color:#E6DB74;">        middlewares:</span></span>
<span class="line"><span style="color:#E6DB74;">          - folder</span></span>
<span class="line"><span style="color:#F8F8F2;">EOF</span></span></code></pre></div><p>Now we can start <code>turna</code> server</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">CONFIG_FILE</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">/var/boot/turna.yaml</span><span style="color:#A6E22E;"> turna</span></span></code></pre></div><p>We enabled the browse option so we can check the files from the browser.</p><h3 id="dhcpd" tabindex="-1">DHCPD <a class="header-anchor" href="#dhcpd" aria-label="Permalink to &quot;DHCPD&quot;">​</a></h3><p>Go and install <a href="./../tools/server/dhcpd.html">dhcpd</a> after that setup same as network config.</p><h3 id="load-balancer" tabindex="-1">Load Balancer <a class="header-anchor" href="#load-balancer" aria-label="Permalink to &quot;Load Balancer&quot;">​</a></h3><p>Go and install <a href="./../tools/server/load_balancer.html">haproxy</a>.</p><h2 id="add-machines-to-the-cluster" tabindex="-1">Add machines to the cluster <a class="header-anchor" href="#add-machines-to-the-cluster" aria-label="Permalink to &quot;Add machines to the cluster&quot;">​</a></h2><p>Create new machine but just give 1 network for internal bridge and set mac address manually based on DHCPD config.</p><p>When we setup the correctly tftpd and dhcpd, we can see the ipxe will work and we can see the alpine linux boot screen.</p><h2 id="install-tools" tabindex="-1">Install Tools <a class="header-anchor" href="#install-tools" aria-label="Permalink to &quot;Install Tools&quot;">​</a></h2><p>kubectl install in with edge repository.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;">echo</span><span style="color:#E6DB74;"> http://dl-cdn.alpinelinux.org/alpine/edge/community</span><span style="color:#F92672;"> &gt;&gt;</span><span style="color:#E6DB74;"> /etc/apk/repositories</span></span>
<span class="line"><span style="color:#A6E22E;">apk</span><span style="color:#E6DB74;"> update</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">apk</span><span style="color:#E6DB74;"> add</span><span style="color:#E6DB74;"> kubectl</span></span></code></pre></div>`,63),t=[l];function p(c,r,i,d,h,y){return a(),n("div",null,t)}const m=s(o,[["render",p]]);export{u as __pageData,m as default};
