import{_ as a,c as n,a2 as l,o as e}from"./chunks/framework.BQmytedh.js";const D=JSON.parse('{"title":"Traefik 404 -> 503","description":"","frontmatter":{},"headers":[],"relativePath":"posts/traefik_503.md","filePath":"posts/traefik_503.md","lastUpdated":1733513171000}'),t={name:"posts/traefik_503.md"};function o(p,s,r,c,i,y){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="traefik-404-503" tabindex="-1">Traefik 404 -&gt; 503 <a class="header-anchor" href="#traefik-404-503" aria-label="Permalink to &quot;Traefik 404 -&gt; 503&quot;">â€‹</a></h1><p>In traefik, if not found a service it is returns 404 Not Found error. But this is not good and it could be data not found on query.</p><p>To prevent this, we can return 503 Service Unavailable error if really service is not exist.</p><p>Traefik&#39;s dynamic configuration we can add this rule to catchall<br> if not found any service and redirect to empty servers list will return 503 error.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#F07178;">http</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  routers</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    catchall</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;">      # attached only to web entryPoint</span></span>
<span class="line"><span style="color:#F07178;">      entryPoints</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">        -</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">        -</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">https</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;">      # catchall rule</span></span>
<span class="line"><span style="color:#F07178;">      rule</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Host(\`proxy\`)</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">      service</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> unavailable</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;">      # lowest possible priority</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;">      # evaluated when no other router is matched</span></span>
<span class="line"><span style="color:#F07178;">      priority</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#F07178;">  services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;">    # Service that will always answer a 503 Service Unavailable response</span></span>
<span class="line"><span style="color:#F07178;">    unavailable</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      loadBalancer</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">        servers</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {}</span></span></code></pre></div>`,5)]))}const d=a(t,[["render",o]]);export{D as __pageData,d as default};
