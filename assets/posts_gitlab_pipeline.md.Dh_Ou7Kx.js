import{_ as a,c as n,a2 as e,o as l}from"./chunks/framework.BQmytedh.js";const D=JSON.parse('{"title":"Gitlab Pipeline","description":"","frontmatter":{},"headers":[],"relativePath":"posts/gitlab_pipeline.md","filePath":"posts/gitlab_pipeline.md","lastUpdated":1733519665000}'),p={name:"posts/gitlab_pipeline.md"};function o(t,s,r,c,i,y){return l(),n("div",null,s[0]||(s[0]=[e(`<h1 id="gitlab-pipeline" tabindex="-1">Gitlab Pipeline <a class="header-anchor" href="#gitlab-pipeline" aria-label="Permalink to &quot;Gitlab Pipeline&quot;">​</a></h1><p>Gitlab&#39;s pipeline is very easy to understand and use it.<br> Also it has good documentation (not like github!) and YAML configuration in a page easy to search and see.</p><blockquote><p><a href="https://docs.gitlab.com/ee/ci/yaml/" target="_blank" rel="noreferrer">https://docs.gitlab.com/ee/ci/yaml/</a></p></blockquote><p>In gitlab there are stages and jobs. Generally jobs inside of stage and when finishes it will pass to next stage.</p><p>Some of features with gitlab pipeline:</p><ul><li>Artifacts to pass files between jobs</li><li>Cache to store files (<em>NOT USE THIS AS ARTIFACTS</em>)</li><li><em>needs</em>, ignore order of stages and run jobs after another job even in same stage</li><li>Import other yaml parts from another repos and extend them in a job</li><li>Dependency control of artifacts</li><li>Services to create some container near to job like DIND container or database container for testing</li><li>Trigger another repo&#39;s pipeline</li><li>Rules to control when to run a job</li><li>Tags to run a job in a specific runner</li><li>Mutex for job run only one time in a runner</li><li>Control environment variables or files in project or group level</li><li>Allow failure to continue pipeline even if a job fails</li><li>Manual trigger to run a job manually</li><li>Generate pipeline on a job and run generated pipeline</li></ul><p>Some examples of how to use it.</p><h2 id="simple-pipeline" tabindex="-1">Simple pipeline <a class="header-anchor" href="#simple-pipeline" aria-label="Permalink to &quot;Simple pipeline&quot;">​</a></h2><p>In here build just a name of the job and add script, tags, stage also rules to control when to run.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#F07178;">build</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  stage</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> build</span></span>
<span class="line"><span style="color:#F07178;">  tags</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    -</span><span style="color:#C3E88D;"> linux</span></span>
<span class="line"><span style="color:#F07178;">  image</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> $BUILD_IMAGE</span></span>
<span class="line"><span style="color:#F07178;">  script</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    -</span><span style="color:#C3E88D;"> echo &quot;Building the project&quot;</span></span>
<span class="line"><span style="color:#F07178;">  rules</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    -</span><span style="color:#F07178;"> if</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> $PIPELINE_DISABLE_JOB_BUILD == &quot;Y&quot;</span></span>
<span class="line"><span style="color:#F07178;">      when</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> never</span></span>
<span class="line"><span style="color:#89DDFF;">    -</span><span style="color:#F07178;"> if</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">    -</span><span style="color:#F07178;"> if</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">    -</span><span style="color:#F07178;"> if</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> $CI_COMMIT_TAG</span></span></code></pre></div><h2 id="git-strategy" tabindex="-1">GIT_STRATEGY <a class="header-anchor" href="#git-strategy" aria-label="Permalink to &quot;GIT_STRATEGY&quot;">​</a></h2><p>GIT_STRATEGY is a variable to control how to clone the repository.</p><p><code>none</code> is to not clone the repository, useful for just running some script.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#F07178;">build</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  variables</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    GIT_STRATEGY</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> none</span></span></code></pre></div><h2 id="import-yaml" tabindex="-1">Import yaml <a class="header-anchor" href="#import-yaml" aria-label="Permalink to &quot;Import yaml&quot;">​</a></h2><p>In same file, include another yaml file directly tell the path of the file.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#F07178;">include</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">  -</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">/parts/variables.yml</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>In another repository give project name and file name to include.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#F07178;">include</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">  -</span><span style="color:#F07178;"> project</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">cicd/pipeline</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    ref</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> master</span></span>
<span class="line"><span style="color:#F07178;">    file</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">service.yml</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">variables</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  DOCKER_IMAGE_NAME</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">awesome-service</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p><code>file</code> also be array of strings to include multiple files.</p><h2 id="resource-group-mutex" tabindex="-1">Resource Group (MUTEX) <a class="header-anchor" href="#resource-group-mutex" aria-label="Permalink to &quot;Resource Group (MUTEX)&quot;">​</a></h2><p>Add resource group in a job to run one job at a time and wait next job to run.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  resource_group</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> bank-1-test</span></span></code></pre></div><h2 id="artifacts" tabindex="-1">Artifacts <a class="header-anchor" href="#artifacts" aria-label="Permalink to &quot;Artifacts&quot;">​</a></h2><p>Pass files between jobs with artifacts.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#F07178;">build</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  stage</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> build</span></span>
<span class="line"><span style="color:#F07178;">  artifacts</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    paths</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">      -</span><span style="color:#C3E88D;"> bin</span></span></code></pre></div><h2 id="needs-and-dependencies" tabindex="-1">Needs and Dependencies <a class="header-anchor" href="#needs-and-dependencies" aria-label="Permalink to &quot;Needs and Dependencies&quot;">​</a></h2><p>Needs to run a job after another job even in same stage or another stage.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#F07178;">deploy</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  needs</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    -</span><span style="color:#F07178;"> job</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> build</span></span>
<span class="line"><span style="color:#F07178;">      artifacts</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span></span></code></pre></div><p>On dependencies, just control the download of artifacts from previous job.</p><p>Give empty array for not to download artifacts. Ex <code>dependencies: []</code></p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#F07178;">deploy</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  dependencies</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    -</span><span style="color:#C3E88D;"> build</span></span></code></pre></div><h2 id="pages" tabindex="-1">Pages <a class="header-anchor" href="#pages" aria-label="Permalink to &quot;Pages&quot;">​</a></h2><p>Gitlab pages are awesome to host static files, same as github pages.</p><p>It should be public folder in artifacts and job name should be <code>pages</code>.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#F07178;">pages</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  artifacts</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    paths</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">      -</span><span style="color:#C3E88D;"> public</span></span></code></pre></div><h2 id="worflow" tabindex="-1">Worflow <a class="header-anchor" href="#worflow" aria-label="Permalink to &quot;Worflow&quot;">​</a></h2><p>Use workflow to set rules in generally.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#F07178;">workflow</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  rules</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    -</span><span style="color:#F07178;"> if</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> $CI_COMMIT_TAG</span></span></code></pre></div><h2 id="generate-pipeline" tabindex="-1">Generate Pipeline <a class="header-anchor" href="#generate-pipeline" aria-label="Permalink to &quot;Generate Pipeline&quot;">​</a></h2><p>In here I used <a href="https://github.com/rytsh/mugo" target="_blank" rel="noreferrer">mugo</a> to generate a pipeline with some environment variables.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#F07178;">generate-pipeline</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  stage</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> generate</span></span>
<span class="line"><span style="color:#F07178;">  image</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> $IMAGE</span></span>
<span class="line"><span style="color:#F07178;">  extends</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> .default-tag</span></span>
<span class="line"><span style="color:#F07178;">  before_script</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    -</span><span style="color:#C3E88D;"> DOCKER_FILE=\${PIPELINE_IMAGE_FILE_PREFIX}$(dirname \${CI_COMMIT_TAG})\${PIPELINE_IMAGE_FILE_SUFFIX}</span></span>
<span class="line"><span style="color:#89DDFF;">    -</span><span style="color:#C3E88D;"> eval $(grep -z -o -P &#39;(?&lt;=# ---)(?s).*(?=# ---)&#39; \${DOCKER_FILE} | tr -d &#39;#&#39; | xargs --null | xargs -I {} echo export {})</span></span>
<span class="line"><span style="color:#F07178;">  script</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    -</span><span style="color:#C3E88D;"> mugo ci/gitlab-ci-tpl.yml -o generated-ci.yml</span></span>
<span class="line"><span style="color:#F07178;">  artifacts</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    paths</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">      -</span><span style="color:#C3E88D;"> generated-ci.yml</span></span>
<span class="line"><span style="color:#F07178;">    expire_in</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> 10m</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">trigger</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  stage</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> trigger</span></span>
<span class="line"><span style="color:#F07178;">  trigger</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    include</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">      -</span><span style="color:#F07178;"> artifact</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> generated-ci.yml</span></span>
<span class="line"><span style="color:#F07178;">        job</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> generate-pipeline</span></span>
<span class="line"><span style="color:#F07178;">    strategy</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> depend</span></span></code></pre></div>`,42)]))}const d=a(p,[["render",o]]);export{D as __pageData,d as default};
