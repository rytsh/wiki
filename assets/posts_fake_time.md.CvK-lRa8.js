import{_ as e,o as s,c as t,ag as n}from"./chunks/framework.BcBuEkoe.js";const u=JSON.parse('{"title":"Fake Time","description":"Fake time in various environments and manipulations of system time for testing purposes.","frontmatter":{"head":[["meta",{"name":"description","content":"Fake time in various environments and manipulations of system time for testing purposes."}],["meta",{"name":"keywords","content":"Faketime Go"}]]},"headers":[],"relativePath":"posts/fake_time.md","filePath":"posts/fake_time.md","lastUpdated":1743799263000}'),o={name:"posts/fake_time.md"};function l(p,a,i,c,r,d){return s(),t("div",null,a[0]||(a[0]=[n(`<h1 id="fake-time" tabindex="-1">Fake Time <a class="header-anchor" href="#fake-time" aria-label="Permalink to &quot;Fake Time&quot;">​</a></h1><h2 id="go-faketime" tabindex="-1">Go faketime <a class="header-anchor" href="#go-faketime" aria-label="Permalink to &quot;Go faketime&quot;">​</a></h2><blockquote><p>Unfortunatelly, libfaketime not usable with golang. But we can write alternative for that.</p></blockquote><h2 id="libfaketime" tabindex="-1">libfaketime <a class="header-anchor" href="#libfaketime" aria-label="Permalink to &quot;libfaketime&quot;">​</a></h2><p>When changing date, libfaketime amazing to do that.</p><p>In debian image</p><div class="language-dockerfile"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">RUN</span><span style="color:#EEFFFF;"> apt-get update &amp;&amp; apt-get install --no-install-recommends -y \\</span></span>
<span class="line"><span style="color:#EEFFFF;">    libfaketime</span></span></code></pre></div><p>After that just show that so file to <code>LD_PRELOAD</code> env and give the <code>FAKETIME</code> env to set the date.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#EEFFFF;">LD_PRELOAD</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1</span><span style="color:#EEFFFF;"> FAKETIME</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2000-01-01 00:00:00</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;"> date</span></span></code></pre></div><p>Default is seconds, <code>FAKETIME=&quot;-120&quot;</code> is 2 minutes ago. But usable with &quot;m&quot;, &quot;h&quot;, &quot;d&quot; and &quot;y&quot; suffixes.</p><p>Use as start</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#EEFFFF;"> LD_PRELOAD</span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;">/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1</span></span></code></pre></div><p>When we do that it is always show the same date. But if we add <strong>@</strong> as prefix it will be start date.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#EEFFFF;"> FAKETIME</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@2000-01-01 00:00:00</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>Now sub process run more than once <code>date</code>, than it will be increase the date.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">/bin/bash</span><span style="color:#C3E88D;"> -c</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">while [ $SECONDS -lt 5 ]; do date; sleep 1; done</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;"># Sat Jan  1 00:00:00 UTC 2000</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;"># Sat Jan  1 00:00:01 UTC 2000</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;"># Sat Jan  1 00:00:02 UTC 2000</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;"># Sat Jan  1 00:00:03 UTC 2000</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;"># Sat Jan  1 00:00:04 UTC 2000</span></span></code></pre></div>`,16)]))}const F=e(o,[["render",l]]);export{u as __pageData,F as default};
