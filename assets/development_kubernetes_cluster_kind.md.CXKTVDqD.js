import{_ as a,o as n,c as e,ag as l}from"./chunks/framework.BcBuEkoe.js";const F=JSON.parse('{"title":"Kind","description":"Kind is a tool for running local Kubernetes clusters using Docker container \\"nodes\\".","frontmatter":{"head":[["meta",{"name":"description","content":"Kind is a tool for running local Kubernetes clusters using Docker container \\"nodes\\"."}],["meta",{"name":"keywords","content":"kubernetes kind"}]]},"headers":[],"relativePath":"development/kubernetes/cluster/kind.md","filePath":"development/kubernetes/cluster/kind.md","lastUpdated":1743799263000}'),o={name:"development/kubernetes/cluster/kind.md"};function p(t,s,c,r,i,d){return n(),e("div",null,s[0]||(s[0]=[l(`<h1 id="kind" tabindex="-1">Kind <a class="header-anchor" href="#kind" aria-label="Permalink to &quot;Kind&quot;">​</a></h1><blockquote><p><a href="https://kind.sigs.k8s.io/" target="_blank" rel="noreferrer">https://kind.sigs.k8s.io/</a></p></blockquote><p>Easiest way to create a kubernetes cluster is open cluster in a docker container. Containers will be as our nodes.</p><p>Kind use <code>KIND_EXPERIMENTAL_PROVIDER</code> environment variable to set provider. Usable providers are <code>docker</code>, <code>podman</code>, <code>nerdctl</code>.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#EEFFFF;"> KIND_EXPERIMENTAL_PROVIDER</span><span style="color:#89DDFF;">=\${</span><span style="color:#EEFFFF;">KIND_EXPERIMENTAL_PROVIDER</span><span style="color:#89DDFF;">:-</span><span style="color:#EEFFFF;">docker</span><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#C3E88D;"> -fSLO</span><span style="color:#C3E88D;"> https://github.com/kubernetes-sigs/kind/releases/download/v0.26.0/kind-linux-amd64</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#FFCB6B;">chmod</span><span style="color:#C3E88D;"> +x</span><span style="color:#C3E88D;"> kind-linux-amd64</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#C3E88D;"> mv</span><span style="color:#C3E88D;"> kind-linux-amd64</span><span style="color:#C3E88D;"> /usr/local/bin/kind</span></span></code></pre></div><p>Verify installation:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">kind</span><span style="color:#C3E88D;"> --version</span></span></code></pre></div><p>Add <code>bash</code> completion:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">source &lt;(kind completion bash)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> &gt;&gt;</span><span style="color:#C3E88D;"> ~/.bashrc</span></span></code></pre></div><p>Before start create cluster with cilium, change kernel and add ip forwarding (this is for socks5 proxy we use in after that).</p><blockquote><p><a href="./pre-requests.html">pre-requests</a></p></blockquote><p>Create a cluster with <code>cilium</code></p><blockquote><p><a href="https://docs.cilium.io/en/latest/installation/kind/" target="_blank" rel="noreferrer">https://docs.cilium.io/en/latest/installation/kind/</a></p></blockquote><p>Cilium can solve of networking between pods and nodes.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#C3E88D;"> mkdir</span><span style="color:#C3E88D;"> -p</span><span style="color:#C3E88D;"> /data/provision</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">cat</span><span style="color:#89DDFF;"> &lt;&lt;</span><span style="color:#89DDFF;">EOF</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#C3E88D;"> kind-config.yaml</span></span>
<span class="line"><span style="color:#C3E88D;">kind: Cluster</span></span>
<span class="line"><span style="color:#C3E88D;">apiVersion: kind.x-k8s.io/v1alpha4</span></span>
<span class="line"><span style="color:#C3E88D;">nodes:</span></span>
<span class="line"><span style="color:#C3E88D;">- role: control-plane</span></span>
<span class="line"><span style="color:#C3E88D;">  extraMounts:</span></span>
<span class="line"><span style="color:#C3E88D;">  - hostPath: /data/provision</span></span>
<span class="line"><span style="color:#C3E88D;">    containerPath: /var/local-path-provisioner</span></span>
<span class="line"><span style="color:#C3E88D;">  - hostPath: /data</span></span>
<span class="line"><span style="color:#C3E88D;">    containerPath: /data</span></span>
<span class="line"><span style="color:#C3E88D;">networking:</span></span>
<span class="line"><span style="color:#C3E88D;">  disableDefaultCNI: true</span></span>
<span class="line"><span style="color:#C3E88D;">  kubeProxyMode: &quot;none&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">EOF</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">kind</span><span style="color:#C3E88D;"> create</span><span style="color:#C3E88D;"> cluster</span><span style="color:#C3E88D;"> --config=kind-config.yaml</span></span></code></pre></div><blockquote><p><code>crictl images</code> command in the kind container to check images.</p></blockquote><p>Your cluster is ready to use in your kubeconfig file <code>~/.kube/config</code>.</p><blockquote><p>Give that config to <code>Lens</code> or use with kubectl.</p></blockquote><p>Remove cluster with <code>kind delete cluster</code> command.</p><h2 id="storage-pvc" tabindex="-1">Storage PVC <a class="header-anchor" href="#storage-pvc" aria-label="Permalink to &quot;Storage PVC&quot;">​</a></h2><p>Kind uses <code>local-path-provisioner</code> for storage and claims automatically will create persistence volume for you. Creating persistent volume claim with our <code>/data/</code> folder.</p><blockquote><p>Only support PVC with <code>ReadWriteOnce</code> mode.</p></blockquote><p>To use that with PVC</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#546E7A;font-style:italic;"># persistent-volume-claim.yaml</span></span>
<span class="line"><span style="color:#F07178;">apiVersion</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> v1</span></span>
<span class="line"><span style="color:#F07178;">kind</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> PersistentVolumeClaim</span></span>
<span class="line"><span style="color:#F07178;">metadata</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> local-pvc</span></span>
<span class="line"><span style="color:#F07178;">spec</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  accessModes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">  -</span><span style="color:#C3E88D;"> ReadWriteOnce</span></span>
<span class="line"><span style="color:#F07178;">  resources</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    requests</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      storage</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> 1Gi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">---</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;"># example-pod.yaml</span></span>
<span class="line"><span style="color:#F07178;">apiVersion</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> v1</span></span>
<span class="line"><span style="color:#F07178;">kind</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> Pod</span></span>
<span class="line"><span style="color:#F07178;">metadata</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> example-pod</span></span>
<span class="line"><span style="color:#F07178;">spec</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  containers</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">  -</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> test-container</span></span>
<span class="line"><span style="color:#F07178;">    image</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> nginx</span></span>
<span class="line"><span style="color:#F07178;">    volumeMounts</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    -</span><span style="color:#F07178;"> mountPath</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> /usr/share/nginx/html</span></span>
<span class="line"><span style="color:#F07178;">      name</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> local-volume</span></span>
<span class="line"><span style="color:#F07178;">  volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">  -</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> local-volume</span></span>
<span class="line"><span style="color:#F07178;">    persistentVolumeClaim</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      claimName</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> local-pvc</span></span></code></pre></div><h2 id="kind-container-is-a-node" tabindex="-1">Kind Container is a NODE <a class="header-anchor" href="#kind-container-is-a-node" aria-label="Permalink to &quot;Kind Container is a NODE&quot;">​</a></h2><p>Get in the kind container to reach the nodes.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#546E7A;font-style:italic;"># docker ps</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> exec</span><span style="color:#C3E88D;"> -it</span><span style="color:#C3E88D;"> kind-control-plane</span><span style="color:#C3E88D;"> bash</span></span></code></pre></div>`,29)]))}const D=a(o,[["render",p]]);export{F as __pageData,D as default};
