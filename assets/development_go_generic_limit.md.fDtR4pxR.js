import{_ as e,o as s,c as n,R as a}from"./chunks/framework.07BXFssY.js";const f=JSON.parse('{"title":"go generic for limiting specific types","description":"","frontmatter":{},"headers":[],"relativePath":"development/go/generic_limit.md","filePath":"development/go/generic_limit.md","lastUpdated":1701512791000}'),o={name:"development/go/generic_limit.md"},t=a(`<h1 id="go-generic-for-limiting-specific-types" tabindex="-1">go generic for limiting specific types <a class="header-anchor" href="#go-generic-for-limiting-specific-types" aria-label="Permalink to &quot;go generic for limiting specific types&quot;">​</a></h1><p>When working with a generic type, first thing to think about stuct types and union of interfaces.<br> There is another simple way to limit the type of generic type with interfaces with some tricks and probably take care of the inside of the function.</p><p>Best part of the generic, we can define the return type on function call.<br> Let&#39;s create a simple generic function that will return the type of the input.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">func</span><span style="color:#F8F8F2;"> GenericType[T any]() T {</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> t</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>This function will return the type of the function. We can still use internally reflect package for initializing the type.</p><p>This <code>any</code> is not good for our function. So we need to limit the type with interfaces.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">type</span><span style="color:#A6E22E;text-decoration:underline;"> myType</span><span style="color:#F92672;"> interface</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;">    myMethod</span><span style="color:#F8F8F2;">() myPrivateType</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>Now we can use this interface as a generic type. I did it on purpose private of myMethod to prevent using it outside of the package.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">func</span><span style="color:#F8F8F2;"> GenericType[T myType]() T {</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> t</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>Now <code>T</code> type should implement <code>myMethod</code> method.<br> If you are using interface as type, it is not needed to real implementation, just existance of the method is enough because it cannot callable from outside of the package.</p><p>I have these interfaces, and <code>myType</code> interface embeded to both of them.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">type</span><span style="color:#A6E22E;text-decoration:underline;"> Worker1</span><span style="color:#F92672;"> interface</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;">    Work1</span><span style="color:#F8F8F2;">() </span><span style="color:#66D9EF;font-style:italic;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    myType</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">type</span><span style="color:#A6E22E;text-decoration:underline;"> Worker2</span><span style="color:#F92672;"> interface</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;">    Work2</span><span style="color:#F8F8F2;">() </span><span style="color:#66D9EF;font-style:italic;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    myType</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>Now I can just use <code>Worker1</code> and <code>Worker2</code> as parameter and not allowed to use other types.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">v1 </span><span style="color:#F92672;">:=</span><span style="color:#F8F8F2;"> code.GenericType[code.Worker1]()</span></span>
<span class="line"><span style="color:#F8F8F2;">v2 </span><span style="color:#F92672;">:=</span><span style="color:#F8F8F2;"> code.GenericType[code.Worker2]()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">v1.</span><span style="color:#66D9EF;">Work1</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">v2.</span><span style="color:#66D9EF;">Work2</span><span style="color:#F8F8F2;">()</span></span></code></pre></div>`,14),p=[t];function l(c,i,r,y,d,F){return s(),n("div",null,p)}const u=e(o,[["render",l]]);export{f as __pageData,u as default};
