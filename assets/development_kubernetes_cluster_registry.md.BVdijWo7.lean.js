import{_ as a,c as n,a2 as o,o as e}from"./chunks/framework.BQmytedh.js";const E=JSON.parse('{"title":"Registry","description":"","frontmatter":{},"headers":[],"relativePath":"development/kubernetes/cluster/registry.md","filePath":"development/kubernetes/cluster/registry.md","lastUpdated":1735567375000}'),l={name:"development/kubernetes/cluster/registry.md"};function p(t,s,r,c,F,y){return e(),n("div",null,s[0]||(s[0]=[o(`<h1 id="registry" tabindex="-1">Registry <a class="header-anchor" href="#registry" aria-label="Permalink to &quot;Registry&quot;">â€‹</a></h1><blockquote><p>TODO: UPDATE HERE</p></blockquote><p>When moving images to kind like that it is slow and and every cluster will have to download the same image. To avoid this we can use a registry.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">cat</span><span style="color:#89DDFF;"> &lt;&lt;</span><span style="color:#89DDFF;">EOF</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> grep</span><span style="color:#C3E88D;"> -v</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">^[[:space:]]*$</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> xargs</span><span style="color:#C3E88D;"> -I</span><span style="color:#C3E88D;"> {}</span><span style="color:#C3E88D;"> sh</span><span style="color:#C3E88D;"> -c</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">docker pull {} &amp;&amp; kind load docker-image {}</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C3E88D;">quay.io/prometheus-operator/prometheus-config-reloader:v0.79.2</span></span>
<span class="line"><span style="color:#C3E88D;">quay.io/prometheus-operator/prometheus-operator:v0.79.2</span></span>
<span class="line"><span style="color:#C3E88D;">quay.io/prometheus/alertmanager:v0.27.0</span></span>
<span class="line"><span style="color:#C3E88D;">quay.io/prometheus/node-exporter:v1.8.2</span></span>
<span class="line"><span style="color:#C3E88D;">quay.io/prometheus/prometheus:v3.0.1</span></span>
<span class="line"><span style="color:#89DDFF;">EOF</span></span></code></pre></div><p>Create folder <code>/opt/registry</code> and run the following command to start a registry.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#C3E88D;"> install</span><span style="color:#C3E88D;"> -d</span><span style="color:#C3E88D;"> -m</span><span style="color:#F78C6C;"> 0777</span><span style="color:#C3E88D;"> /opt/registry</span></span></code></pre></div><p>Append authentication to the registry.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">-e</span><span style="color:#C3E88D;"> REGISTRIES=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">k8s.gcr.io gcr.io quay.io your.own.registry another.public.registry</span><span style="color:#89DDFF;">&quot;</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#EEFFFF;">-e </span><span style="color:#C3E88D;">AUTH_REGISTRIES=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">auth.docker.io:dockerhub_username:dockerhub_password your.own.registry:username:password</span><span style="color:#89DDFF;">&quot;</span><span style="color:#EEFFFF;"> \\</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> run</span><span style="color:#C3E88D;"> -d</span><span style="color:#C3E88D;"> --restart=always</span><span style="color:#C3E88D;"> --name</span><span style="color:#C3E88D;"> docker_registry_proxy</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#C3E88D;">    --net</span><span style="color:#C3E88D;"> kind</span><span style="color:#C3E88D;"> --hostname</span><span style="color:#C3E88D;"> docker-registry-proxy</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#C3E88D;">    -p</span><span style="color:#C3E88D;"> 0.0.0.0:3128:3128</span><span style="color:#C3E88D;"> -e</span><span style="color:#C3E88D;"> ENABLE_MANIFEST_CACHE=</span><span style="color:#89DDFF;">true</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#C3E88D;">    -v</span><span style="color:#C3E88D;"> /opt/registry/docker_mirror_cache:/docker_mirror_cache</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#C3E88D;">    -v</span><span style="color:#C3E88D;"> /opt/registry/docker_mirror_certs:/ca</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#C3E88D;">    rpardini/docker-registry-proxy:0.6.4</span></span></code></pre></div><p>Kind installation complete run these commands to setup the registry.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#EEFFFF;">KIND_NAME</span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;font-style:italic;">\${1</span><span style="color:#EEFFFF;">-kind</span><span style="color:#EEFFFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#EEFFFF;">SETUP_URL</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">http://docker-registry-proxy:3128/setup/systemd</span></span>
<span class="line"><span style="color:#EEFFFF;">pids</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#EEFFFF;"> NODE </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#89DDFF;"> $(</span><span style="color:#FFCB6B;">kind</span><span style="color:#C3E88D;"> get</span><span style="color:#C3E88D;"> nodes</span><span style="color:#C3E88D;"> --name</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#EEFFFF;">$KIND_NAME</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#89DDFF;font-style:italic;"> do</span></span>
<span class="line"><span style="color:#FFCB6B;">  docker</span><span style="color:#C3E88D;"> exec</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#EEFFFF;">$NODE</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> sh</span><span style="color:#C3E88D;"> -c</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#EEFFFF;">\\</span></span>
<span class="line"><span style="color:#C3E88D;">      curl </span><span style="color:#EEFFFF;">$SETUP_URL</span><span style="color:#EEFFFF;"> \\</span></span>
<span class="line"><span style="color:#C3E88D;">      | sed s/docker\\.service/containerd\\.service/g </span><span style="color:#EEFFFF;">\\</span></span>
<span class="line"><span style="color:#C3E88D;">      | sed &#39;/Environment/ s/$/ </span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;">NO_PROXY=127.0.0.0\\/8,10.0.0.0\\/8,172.16.0.0\\/12,192.168.0.0\\/16</span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;">/&#39; </span><span style="color:#EEFFFF;">\\</span></span>
<span class="line"><span style="color:#C3E88D;">      | bash</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#EEFFFF;"> pids</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#EEFFFF;">$pids</span><span style="color:#EEFFFF;"> $!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#546E7A;font-style:italic;"> # Configure every node in background</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">done</span></span>
<span class="line"><span style="color:#82AAFF;">wait</span><span style="color:#EEFFFF;"> $pids </span><span style="color:#546E7A;font-style:italic;"># Wait for all configurations to end</span></span></code></pre></div>`,11)]))}const D=a(l,[["render",p]]);export{E as __pageData,D as default};
