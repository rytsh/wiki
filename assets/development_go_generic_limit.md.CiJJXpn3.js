import{_ as s,c as e,o as n,a4 as a}from"./chunks/framework.BIfEuBG4.js";const g=JSON.parse('{"title":"go generic for limiting specific types","description":"","frontmatter":{},"headers":[],"relativePath":"development/go/generic_limit.md","filePath":"development/go/generic_limit.md","lastUpdated":1701512791000}'),o={name:"development/go/generic_limit.md"},p=a(`<h1 id="go-generic-for-limiting-specific-types" tabindex="-1">go generic for limiting specific types <a class="header-anchor" href="#go-generic-for-limiting-specific-types" aria-label="Permalink to &quot;go generic for limiting specific types&quot;">​</a></h1><p>When working with a generic type, first thing to think about stuct types and union of interfaces.<br> There is another simple way to limit the type of generic type with interfaces with some tricks and probably take care of the inside of the function.</p><p>Best part of the generic, we can define the return type on function call.<br> Let&#39;s create a simple generic function that will return the type of the input.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#82AAFF;"> GenericType</span><span style="color:#89DDFF;">[</span><span style="color:#EEFFFF;font-style:italic;">T</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">]()</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#EEFFFF;"> t</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>This function will return the type of the function. We can still use internally reflect package for initializing the type.</p><p>This <code>any</code> is not good for our function. So we need to limit the type with interfaces.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#FFCB6B;"> myType</span><span style="color:#89DDFF;"> interface</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    myMethod</span><span style="color:#89DDFF;">()</span><span style="color:#FFCB6B;"> myPrivateType</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Now we can use this interface as a generic type. I did it on purpose private of myMethod to prevent using it outside of the package.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#82AAFF;"> GenericType</span><span style="color:#89DDFF;">[</span><span style="color:#EEFFFF;font-style:italic;">T</span><span style="color:#FFCB6B;"> myType</span><span style="color:#89DDFF;">]()</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#EEFFFF;"> t</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Now <code>T</code> type should implement <code>myMethod</code> method.<br> If you are using interface as type, it is not needed to real implementation, just existance of the method is enough because it cannot callable from outside of the package.</p><p>I have these interfaces, and <code>myType</code> interface embeded to both of them.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#FFCB6B;"> Worker1</span><span style="color:#89DDFF;"> interface</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    Work1</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">    myType</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#FFCB6B;"> Worker2</span><span style="color:#89DDFF;"> interface</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    Work2</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">    myType</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Now I can just use <code>Worker1</code> and <code>Worker2</code> as parameter and not allowed to use other types.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#EEFFFF;">v1 </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> code</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GenericType</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">code</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Worker1</span><span style="color:#89DDFF;">]()</span></span>
<span class="line"><span style="color:#EEFFFF;">v2 </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> code</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GenericType</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">code</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Worker2</span><span style="color:#89DDFF;">]()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EEFFFF;">v1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Work1</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#EEFFFF;">v2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Work2</span><span style="color:#89DDFF;">()</span></span></code></pre></div>`,14),t=[p];function l(c,i,r,F,y,d){return n(),e("div",null,t)}const f=s(o,[["render",l]]);export{g as __pageData,f as default};
