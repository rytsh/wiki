import{_ as a,o as n,c as l,ag as o}from"./chunks/framework.BcBuEkoe.js";const i=JSON.parse('{"title":"Telemetry","description":"","frontmatter":{},"headers":[],"relativePath":"development/go/telemetry.md","filePath":"development/go/telemetry.md","lastUpdated":1747739077000}'),p={name:"development/go/telemetry.md"};function e(t,s,F,c,r,y){return n(),l("div",null,s[0]||(s[0]=[o(`<h1 id="telemetry" tabindex="-1">Telemetry <a class="header-anchor" href="#telemetry" aria-label="Permalink to &quot;Telemetry&quot;">​</a></h1><p>For share telemetry we need to use <code>opentelemetry</code>. It&#39;s a standard for telemetry data collection and export.</p><blockquote><p>Never use other libraries directly in code!</p></blockquote><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#C3E88D;"> get</span><span style="color:#C3E88D;"> github.com/worldline-go/tell</span></span></code></pre></div><p>Check example in here <a href="https://github.com/worldline-go/telemetry_example" target="_blank" rel="noreferrer">https://github.com/worldline-go/telemetry_example</a></p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>I created a <a href="https://github.com/worldline-go/tell" target="_blank" rel="noreferrer">opentelemetry library</a> for helper telemetry initialization so I will continue to use it.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#FFCB6B;">github.com/worldline-go/tell</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#FFCB6B;"> Config</span><span style="color:#89DDFF;"> struct</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#EEFFFF;">    Telemetry </span><span style="color:#FFCB6B;">tell</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Config</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Inside in the main function after load the config, we need to initialize the tell library to make connection with otel-collector.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#EEFFFF;">collector</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> tell</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> cfg</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">Telemetry</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#EEFFFF;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#89DDFF;"> nil</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#EEFFFF;"> fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Errorf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">failed to init telemetry; </span><span style="color:#F07178;">%w</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#546E7A;font-style:italic;">// flush metrics on failure</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">defer</span><span style="color:#EEFFFF;"> collector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Shutdown</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p>You can now use any of telemetry library or own telemetry data.</p><h2 id="metric" tabindex="-1">Metric <a class="header-anchor" href="#metric" aria-label="Permalink to &quot;Metric&quot;">​</a></h2><p>For metrics you can create one and add lots of attributes to it but attributes cannot be dynamic! Dynamic attributes killing memory in otel-collector and hard to investigate them.</p><h3 id="custom" tabindex="-1">Custom <a class="header-anchor" href="#custom" aria-label="Permalink to &quot;Custom&quot;">​</a></h3><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#FFCB6B;"> telemetry</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">	&quot;</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">	&quot;</span><span style="color:#FFCB6B;">go.opentelemetry.io/otel</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">	&quot;</span><span style="color:#FFCB6B;">go.opentelemetry.io/otel/attribute</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">	&quot;</span><span style="color:#FFCB6B;">go.opentelemetry.io/otel/metric</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#89DDFF;"> (</span></span>
<span class="line"><span style="color:#EEFFFF;">	GlobalAttr  </span><span style="color:#89DDFF;">[]</span><span style="color:#FFCB6B;">attribute</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">KeyValue</span></span>
<span class="line"><span style="color:#EEFFFF;">	GlobalMeter </span><span style="color:#89DDFF;">*</span><span style="color:#FFCB6B;">Meter</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#FFCB6B;"> Meter</span><span style="color:#89DDFF;"> struct</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#EEFFFF;">	Error     </span><span style="color:#FFCB6B;">metric</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Int64Counter</span></span>
<span class="line"><span style="color:#EEFFFF;">	Processed </span><span style="color:#FFCB6B;">metric</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Int64Counter</span></span>
<span class="line"><span style="color:#EEFFFF;">	Rules     </span><span style="color:#FFCB6B;">metric</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Int64Counter</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#82AAFF;"> AddGlobalAttr</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;font-style:italic;">v</span><span style="color:#89DDFF;"> ...</span><span style="color:#FFCB6B;">attribute</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">KeyValue</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#EEFFFF;">	GlobalAttr </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> append</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">GlobalAttr</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> v</span><span style="color:#89DDFF;">...)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#82AAFF;"> ExtendGlobalAttr</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;font-style:italic;">v</span><span style="color:#89DDFF;"> ...</span><span style="color:#FFCB6B;">attribute</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">KeyValue</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> []</span><span style="color:#FFCB6B;">attribute</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">KeyValue</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	return</span><span style="color:#82AAFF;"> append</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">GlobalAttr</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> v</span><span style="color:#89DDFF;">...)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#82AAFF;"> SetGlobalMeter</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> error</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#EEFFFF;">	mp </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> otel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetMeterProvider</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EEFFFF;">	m </span><span style="color:#89DDFF;">:=</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#FFCB6B;">Meter</span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">	var</span><span style="color:#EEFFFF;"> err </span><span style="color:#C792EA;">error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EEFFFF;">	meter </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> mp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Meter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#546E7A;font-style:italic;">	//nolint:lll</span><span style="color:#546E7A;font-style:italic;"> // description</span></span>
<span class="line"><span style="color:#EEFFFF;">	m</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">Processed</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> err </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> meter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Int64Counter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">transaction_processed_total</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> metric</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithDescription</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">number of successfully validated count</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	if</span><span style="color:#EEFFFF;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#89DDFF;"> nil</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">		return</span><span style="color:#EEFFFF;"> fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Errorf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">failed to initialize transaction_processed_total; </span><span style="color:#F07178;">%w</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EEFFFF;">	m</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">Error</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> err </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> meter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Int64Counter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">transaction_error_total</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> metric</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithDescription</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">number of error on validation count</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	if</span><span style="color:#EEFFFF;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#89DDFF;"> nil</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">		return</span><span style="color:#EEFFFF;"> fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Errorf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">failed to initialize transaction_error_total; </span><span style="color:#F07178;">%w</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EEFFFF;">	m</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">Rules</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> err </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> meter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Int64Counter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">transaction_rules_total</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> metric</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithDescription</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">number of used rule on validation count</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	if</span><span style="color:#EEFFFF;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#89DDFF;"> nil</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">		return</span><span style="color:#EEFFFF;"> fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Errorf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">failed to initialize transaction_error_total; </span><span style="color:#F07178;">%w</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EEFFFF;">	GlobalMeter </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> m</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	return</span><span style="color:#89DDFF;"> nil</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#546E7A;font-style:italic;">//nolint:gochecknoinits</span><span style="color:#546E7A;font-style:italic;"> // set noop</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#82AAFF;"> init</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#EEFFFF;">	_ </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> SetGlobalMeter</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="echo" tabindex="-1">Echo <a class="header-anchor" href="#echo" aria-label="Permalink to &quot;Echo&quot;">​</a></h3><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#546E7A;font-style:italic;">// import &quot;github.com/worldline-go/tell/metric/metricecho&quot;</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;">// add echo metrics</span></span>
<span class="line"><span style="color:#EEFFFF;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Use</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">metricecho</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">HTTPMetrics</span><span style="color:#89DDFF;">())</span></span></code></pre></div><h2 id="trace" tabindex="-1">Trace <a class="header-anchor" href="#trace" aria-label="Permalink to &quot;Trace&quot;">​</a></h2><h3 id="span" tabindex="-1">Span <a class="header-anchor" href="#span" aria-label="Permalink to &quot;Span&quot;">​</a></h3><p>Span creating a trace for a specific operation like for function.</p><p>Please check the <a href="https://opentelemetry.io/docs/specs/semconv/" target="_blank" rel="noreferrer">https://opentelemetry.io/docs/specs/semconv/</a> for adding attributes for general thing.</p><h3 id="echo-1" tabindex="-1">Echo <a class="header-anchor" href="#echo-1" aria-label="Permalink to &quot;Echo&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#C3E88D;"> get</span><span style="color:#C3E88D;"> go.opentelemetry.io/contrib/instrumentation/github.com/labstack/echo/otelecho</span></span></code></pre></div><p>Add echo&#39;s middleware to the service.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#546E7A;font-style:italic;">// add echo otel tracing</span></span>
<span class="line"><span style="color:#EEFFFF;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Use</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">otelecho</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Middleware</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">config</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">ServiceName</span><span style="color:#89DDFF;">))</span></span></code></pre></div><h3 id="http-request" tabindex="-1">Http Request <a class="header-anchor" href="#http-request" aria-label="Permalink to &quot;Http Request&quot;">​</a></h3><p>So we get ctx from request&#39;s context but if we use that directly there cloud be timeout issue, so we need to create a new context with timeout.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#EEFFFF;">ctx </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithoutCancel</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">ctx</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>And use that one to create new span to measure http time but don&#39;t forget to add span kind as client.<br> This is important for generating service-graph!</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#EEFFFF;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> spanCall </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> tracer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Start</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">get-transaction</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> trace</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithSpanKind</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">trace</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">SpanKindClient</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">defer</span><span style="color:#EEFFFF;"> spanCall</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">End</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#546E7A;font-style:italic;">// add context propagation or use klient&#39;s inject option to do it automatically</span></span>
<span class="line"><span style="color:#EEFFFF;">otel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetTextMapPropagator</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Inject</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> propagation</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">HeaderCarrier</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">request</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">Header</span><span style="color:#89DDFF;">))</span></span></code></pre></div><p>Inject to http header of traceID can done with klient&#39;s option.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#EEFFFF;">klient</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithInject</span><span style="color:#89DDFF;">(func(</span><span style="color:#EEFFFF;font-style:italic;">ctx</span><span style="color:#FFCB6B;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Context</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;font-style:italic;"> req</span><span style="color:#89DDFF;"> *</span><span style="color:#FFCB6B;">http</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#EEFFFF;">    otel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetTextMapPropagator</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Inject</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> propagation</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">HeaderCarrier</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">req</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">Header</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;">})</span></span></code></pre></div><h3 id="database" tabindex="-1">Database <a class="header-anchor" href="#database" aria-label="Permalink to &quot;Database&quot;">​</a></h3><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#EEFFFF;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> span </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> otel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tracer</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">Start</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">ctx</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#C3E88D;">add_product</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#EEFFFF;">    trace</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithSpanKind</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">trace</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">SpanKindClient</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#EEFFFF;">    trace</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithAttributes</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">attribute</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">String</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">db.name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">postgres</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)),</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">defer</span><span style="color:#EEFFFF;"> span</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">End</span><span style="color:#89DDFF;">()</span></span></code></pre></div><h3 id="kafka" tabindex="-1">Kafka <a class="header-anchor" href="#kafka" aria-label="Permalink to &quot;Kafka&quot;">​</a></h3><p>wkafka uses franz-go library and it is help propogation.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#C3E88D;"> get</span><span style="color:#C3E88D;"> github.com/twmb/franz-go/plugin/kotel</span></span></code></pre></div><p>Use that with initializing the kafka client.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#EEFFFF;">kafkaTracer </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> kotel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewTracer</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EEFFFF;">kafkaClient</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> err </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> wkafka</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">ctx</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#EEFFFF;">    config</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">Application</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">KafkaConfig</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#EEFFFF;">    wkafka</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithConsumer</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">config</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">Application</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">KafkaConsumer</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#EEFFFF;">    wkafka</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithClientInfo</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">config</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">ServiceName</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> config</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">ServiceVersion</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#EEFFFF;">    wkafka</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithKGOOptions</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">kgo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithHooks</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">kotel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewKotel</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">kotel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithTracer</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">kafkaTracer</span><span style="color:#89DDFF;">)).</span><span style="color:#82AAFF;">Hooks</span><span style="color:#89DDFF;">()...)),</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span></code></pre></div><h4 id="produce-message" tabindex="-1">Produce message <a class="header-anchor" href="#produce-message" aria-label="Permalink to &quot;Produce message&quot;">​</a></h4><p>Important to have span kind as producer.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#EEFFFF;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> spanKafka </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> otel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tracer</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">Start</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">produce_message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> trace</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithSpanKind</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">trace</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">SpanKindProducer</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">defer</span><span style="color:#EEFFFF;"> spanKafka</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">End</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#EEFFFF;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> h</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">KafkaProducer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Produce</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> product</span><span style="color:#89DDFF;">);</span><span style="color:#EEFFFF;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#89DDFF;"> nil</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#EEFFFF;">    spanKafka</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SetStatus</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">codes</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">Error</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> err</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Error</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#EEFFFF;"> c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">JSON</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">http</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">StatusBadRequest</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> model</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Message</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#EEFFFF;">        Message</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> err</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Error</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#89DDFF;">    })</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="consume-message" tabindex="-1">Consume message <a class="header-anchor" href="#consume-message" aria-label="Permalink to &quot;Consume message&quot;">​</a></h4><p><code>k.Tracer</code> is we initialized on kafka client (kotel.NewTracer()).</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#89DDFF;"> (</span><span style="color:#EEFFFF;font-style:italic;">k </span><span style="color:#89DDFF;">*</span><span style="color:#FFCB6B;">Kafka</span><span style="color:#89DDFF;">)</span><span style="color:#82AAFF;"> Consume</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;font-style:italic;">ctx</span><span style="color:#FFCB6B;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Context</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;font-style:italic;"> product</span><span style="color:#FFCB6B;"> model</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Product</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> error</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#546E7A;font-style:italic;">	// use tracer&#39;s returned ctx for next spans</span></span>
<span class="line"><span style="color:#EEFFFF;">	_</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> span </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> k</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">Tracer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithProcessSpan</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">wkafka</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CtxRecord</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">ctx</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	defer</span><span style="color:#EEFFFF;"> span</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">End</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EEFFFF;">	span</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SetAttributes</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">attribute</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">String</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">product.name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> product</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">Name</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#EEFFFF;">	log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Info</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Str</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">product</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> product</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">Name</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">Str</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> product</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">Description</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">Msg</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">consume message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	return</span><span style="color:#89DDFF;"> nil</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>If using on batch consumer then use wkafka.CtxRecordWithIndex function to get record from the batch.</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme vp-code" tabindex="0"><code><span class="line"><span style="color:#EEFFFF;">_</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> span </span><span style="color:#89DDFF;">:=</span><span style="color:#EEFFFF;"> s</span><span style="color:#89DDFF;">.</span><span style="color:#EEFFFF;">tracer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithProcessSpan</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">wkafka</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CtxRecordWithIndex</span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 123</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">defer</span><span style="color:#EEFFFF;"> span</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">End</span><span style="color:#89DDFF;">()</span></span></code></pre></div>`,47)]))}const E=a(p,[["render",e]]);export{i as __pageData,E as default};
